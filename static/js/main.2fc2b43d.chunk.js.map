{"version":3,"sources":["assets/images/icon-arrow.svg","assets/images/icon-error.svg","assets/images/logo.svg","components/SendMail.js","components/Content.js","components/Image.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SendMail","React","useState","email","setEmail","error","setError","className","onSubmit","event","preventDefault","test","console","log","name","type","id","placeholder","onChange","e","target","value","src","Error","alt","Arrow","Content","logo","Image","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gMCsD5BC,EAlDE,WAAO,IAAD,EACKC,IAAMC,SAAS,IADpB,mBACdC,EADc,KACPC,EADO,OAEKH,IAAMC,SAAS,MAFpB,mBAEdG,EAFc,KAEPC,EAFO,KAuBrB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAWF,EAAQ,iBAAmB,YACzC,0BAAMG,SAbS,SAACC,GAEpB,GADAA,EAAMC,iBALK,iDACDC,KAAKR,GAUf,OADAG,EAAS,MACFM,QAAQC,IAAI,2BAJjBP,EAAS,kCAWL,2BACEQ,KAAK,QACLC,KAAK,OACLC,GAAG,QACHC,YAAY,gBACZC,SA5BW,SAACC,GACpBf,EAASe,EAAEC,OAAOC,UA6BZ,yBACEC,IAAKC,IACLC,IAAI,QACJjB,UAAWF,EAAQ,oBAAsB,cAE3C,yBAAKE,UAAU,oBACb,2BAAOQ,KAAK,SAASM,MAAM,KAC3B,yBAAKC,IAAKG,IAAOD,IAAI,aAI1BnB,EAAQ,uBAAGE,UAAU,aAAaF,GAAa,O,gBCtBvCqB,EAvBC,WACd,OACE,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,iBACb,yBAAKe,IAAKK,IAAMH,IAAI,OAAOjB,UAAU,SACrC,yBAAKA,UAAU,gBACf,6BACE,uBAAGA,UAAU,kBACX,0BAAMA,UAAU,0BAAhB,SACA,6BAFF,WAEgB,6BAFhB,SAIA,uBAAGA,UAAU,oBAAb,2JAKA,kBAAC,EAAD,UCVKqB,EARD,WACZ,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKtB,UAAU,Y,MCUNuB,MATf,WACE,OACE,yBAAKvB,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLO,QAAQP,MAAMA,EAAM2C,c","file":"static/js/main.2fc2b43d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.69950c2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-error.33780997.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.877543ce.svg\";","import React from \"react\";\r\nimport Arrow from \"../assets/images/icon-arrow.svg\";\r\nimport Error from \"../assets/images/icon-error.svg\";\r\n\r\nconst SendMail = () => {\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [error, setError] = React.useState(null);\r\n\r\n  const handleChange = (e) => {\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  const validate = () => {\r\n    const re = /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\r\n    return re.test(email);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!validate()) {\r\n      setError(\"Please provide a valid email\");\r\n      return;\r\n    }\r\n    setError(null);\r\n    return console.log(\"Email sent successfully\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"mobileDiv\">\r\n      <div className={error ? \"sendMail error\" : \"sendMail\"}>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            name=\"email\"\r\n            type=\"text\"\r\n            id=\"email\"\r\n            placeholder=\"Email Address\"\r\n            onChange={handleChange}\r\n          />\r\n          <img\r\n            src={Error}\r\n            alt=\"error\"\r\n            className={error ? \"errorIcon visible\" : \"errorIcon\"}\r\n          />\r\n          <div className=\"sendMail__button\">\r\n            <input type=\"submit\" value=\"\" />\r\n            <img src={Arrow} alt=\"arrow\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {error ? <p className=\"errorText\">{error}</p> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SendMail;\r\n","import React from \"react\";\r\nimport SendMail from \"../components/SendMail\";\r\nimport logo from \"../assets/images/logo.svg\";\r\n\r\nconst Content = () => {\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"content__main\">\r\n        <img src={logo} alt=\"logo\" className=\"logo\" />\r\n        <div className=\"imageMobile\" />\r\n        <div>\r\n          <p className=\"content__title\">\r\n            <span className=\"content__title-pronoun\">We're</span>\r\n            <br /> Coming <br /> Soon\r\n          </p>\r\n          <p className=\"content__summary\">\r\n            Hello fellow shoppers! We're currently building our new fashion\r\n            store. Add your email below to stay up-to-date with announcements\r\n            and our launch deals.\r\n          </p>\r\n          <SendMail />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\n\r\nconst Image = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"image\" />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React from \"react\";\n\nimport Content from \"./components/Content\";\nimport Image from \"./components/Image\";\nimport \"./styles/main.scss\";\n\nfunction App() {\n  return (\n    <div className=\"home\">\n      <Content />\n      <Image />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}